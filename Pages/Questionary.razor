@page "/Questionary"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<PageTitle>Questionary</PageTitle>

<h3>Questionary</h3>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="DoQuestionary" disabled="@(!IsConnected)">Call Questionary</button>


<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnectionQuestionary;

    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnectionQuestionary = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/questionaryhub"))
            .Build();

        hubConnectionQuestionary.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });


        await hubConnectionQuestionary.StartAsync();
    }

    private async Task DoQuestionary()
    {
        if (hubConnectionQuestionary is not null)
        {
            await hubConnectionQuestionary.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    // Add here All methods require to fulfill functional requirements
    #region Questionary Methods


    // private async Task DoMethodName(string val1, int val2, ...){}
    // private async Task<DataModel> DoMethodName(string val1, int val2, ...){}


    #endregion


    #region Dispose
    public bool IsConnected =>
        hubConnectionQuestionary?.State == HubConnectionState.Connected;



    public async ValueTask DisposeAsync()
    {
        if (hubConnectionQuestionary is not null)
        {
            await hubConnectionQuestionary.DisposeAsync();
        }

    }
    #endregion
}